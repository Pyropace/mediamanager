// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using Media.BE;
namespace Media.DAC.Tests
{
    /// <summary>
    ///This is a test class for Media.BC.MediaFileNameParser and is intended
    ///to contain all Media.BC.MediaFileNameParser Unit Tests
    ///</summary>
    [TestClass()]
    public class MediaFileNameParserTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Parse (string)
        ///</summary>
        [DeploymentItem("Media.BC.dll")]
        [TestMethod()]
        public void ParseTest()
        {
            object target = Media.DAC.Tests.Media_BC_MediaFileNameParserAccessor.CreatePrivate();

            Media.DAC.Tests.Media_BC_MediaFileNameParserAccessor accessor = new Media.DAC.Tests.Media_BC_MediaFileNameParserAccessor(target);

            string []fileNames = new string[] { @"M:\ALL_NEW_STUFF\Movies\Alexander.DVDRip.XviD-DMT\CD1\dmt-alexander-cd1.avi",
                @"M:\ALL_NEW_STUFF\Movies\Deuce Bigalow-European Gigolo DVDRip XviD-ALLiANCE 2005\alliance-deuce2-xvid.avi",
                @"M:\ALL_NEW_STUFF\Movies\Batman.Begins.DVDRip.XviD-DoNE\CD1\Batman.Begins.DVDRip.XviD-DoNE.1.avi",
                @"M:\ALL_NEW_STUFF\prison.break.s01e15.hr.hdtv.ac3.5.1.xvid-ctu.avi",
                @"M:\ALL_NEW_STUFF\smallville.517.hdtv-lol.avi",
                @"K:\TV Shows\Unsorted\er.1202.hdtv-lol.avi",
                @"M:\ALL_NEW_STUFF\24.515.hdtv-lol.avi",
                @"K:\TV Shows\X-Men Evolution\Season 4\X-Men Evolution 4x04 - Sins Of The Son.avi",
                @"K:\Tv Shows\Unsorted\Alias_-_4x22_-_Before_The_Flood.HR-HDTV.CTU.xvid.avi",
                @"K:\tv shows\Friends\season 10\friends.1006.the.one.with.ross's.grant.pdtv.avi"
            };
/*
            MediaFileInfo expected = null;
            MediaFileInfo actual;


            Assert.AreEqual(expected, actual, "Media.BC.MediaFileNameParser.Parse did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");*/
            foreach (string fileName in fileNames)
            {
                Console.WriteLine("Testing: " + fileName);
                MediaFile actual = accessor.Parse(fileName);
            }
            

        }

        [DeploymentItem("Media.BC.dll")]
        [TestMethod()]
        public void TestAllShows()
        {
            object target = Media.DAC.Tests.Media_BC_MediaFileNameParserAccessor.CreatePrivate();

            Media.DAC.Tests.Media_BC_MediaFileNameParserAccessor accessor = new Media.DAC.Tests.Media_BC_MediaFileNameParserAccessor(target);
            
            DirectoryInfo dirinfo = new DirectoryInfo(@"K:\tv shows");
            int attempts = 0;
            int successes = 0;
            foreach (FileInfo fileInfo in dirinfo.GetFiles("*.avi", SearchOption.AllDirectories))
            {
                if (fileInfo.FullName.Contains("Documentaries"))
                    continue;
                attempts++;
                Console.WriteLine("Testing: " + fileInfo.FullName);
                MediaFile actual = accessor.Parse(fileInfo.FullName);
                if (actual.FileType == MediaFileType.TvEpisode)
                    successes++;
            }
            Console.WriteLine("Attempts: " + attempts + ". Successes: " + successes + ". Failures: " + (attempts - successes) + ". Accuracy: " + ((double)successes / (double)attempts) * 100.0d);
        }

    }


}
